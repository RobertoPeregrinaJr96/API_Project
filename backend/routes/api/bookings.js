const express = require('express')
const bcrypt = require('bcryptjs');
const { setTokenCookie, requireAuth } = require('../../utils/auth');

const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');

const { Booking, Spot, SpotImage, Review, ReviewImage, User } = require('../../db/models');
const spot = require('../../db/models/spot');
const { Op } = require('sequelize');


const router = express.Router();


// Get all of the Current User's Bookings
router.get('/current', async (req, res) => {

    const { user } = req
    // console.log('user', user)

    console.log('break 1 ----------')

    const Bookings = await Booking.findAll({
        attributes: ['id', 'spotId', 'userId', 'startDate', 'endDate', 'createdAt', 'updatedAt'],
        include: [
            {
                model: Spot, attributes: ['id', 'ownerId', 'address', 'city', 'state', 'country', 'lat', 'lng', 'name', 'description', 'price'],
                // include: { model: SpotImage, attributes: ['url', 'preview'] }
            }
        ],
        where: {
            userId: user.id
        },
    })

    // const bookingArr = []

    // // currentBooking.forEach(booking => bookingArr.push(booking.toJSON()))

    // // console.log(currentBooking)
    // console.log('break 3 ----------')

    // bookingArr.forEach(booking => {
    //     console.log('booking', booking)

    //     // THIS STILL NEEDS TO WORK FOR ORIGINAL RESPONSE
    //     for (spot in booking.Spots) {
    //         console.log('spot', spot)
    //         console.log('break 4 ----------')

    //         // spot.SpotImages.forEach(img => {
    //         //    console.log('img',img)
    //         //     if (img.preview === true || img.preview === 1) {
    //         //         spot.previewImage = img.url
    //         //         // console.log(spot.previewImage)
    //         //     }
    //         //     if (!spot.previewImage) {
    //         //         spot.previewImage = 'no previewImage found'
    //         //     }
    //         // })
    //         // delete spot.SpotImages
    //     }
    // });

    // console.log('break 5 ----------')





    res.status(200)
    res.json({ Bookings })
})


// not Done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// Edit a Booking
router.put('/:bookingId', requireAuth, async (req, res) => {


    const id = req.params.bookingId;
    // console.log('id', id);

    let { startDate, endDate } = req.body;
    console.log(req.body)

    const start = new Date(startDate);
    const end = new Date(endDate);
    console.log('start', start);
    console.log('end', end)

    console.log("break 1 -----------------------------")

    const testBook = await Booking.findByPk(id)

    if (!testBook) {
        res.status(404);
        res.json({
            message: 'Booking couldn\'t be found'
        })
    }

    console.log("break 2 -----------------------------")

    if (testBook.userId !== id) {
        res.status(403)
        res.json({
            message: 'Forbidden'
        })
    }

    let book = await Booking.findAll({
        where: {
            id: id
        },

    })

    console.log('book', book);

    if (start > end) {
        res.status(400)
        res.json({
            "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
            "errors": {
                "endDate": "endDate cannot come before startDate"
            }
        })
    }

    console.log('break --------------------------------------')

    const testObj = {}

    const testBooks = await Booking.findAll({
        where: {
            spotId: id,
        }
    })

    console.log(testBook)

    testBooks.forEach(booking => {

        // console.log(booking)
        console.log(booking.startDate)
        console.log('startDate', booking.startDate.getTime())
        console.log('endDate', booking.endDate.getTime())
        console.log('start', start.getTime())
        console.log('end', end.getTime())

        if (booking.startDate.getTime() <= start.getTime()
            && booking.endDate.getTime() >= start.getTime()) {
            testObj.startDate = 'Start date conflicts with an existing booking'
        }

        if (booking.endDate.getTime() <= end.getTime()
            && booking.startDate.getTime() <= end.getTime()) {
            testObj.endDate = 'End date conflicts with an existing booking'
        }
    })

    if (testObj.startDate || testObj.endDate) {
        res.status(403)
        res.json(testObj)
    }


    const now = new Date()
    console.log(now)

    if (now > end) {
        res.status(403);
        return res.json({
            message: 'Past bookings can\'t be modified'
        })
    }

    console.log("break 3 -----------------------------")

    testBook.dataValues.startDate = start.toISOString().split('T0')[0];
    testBook.dataValues.endDate = end.toISOString().split('T0')[0];

    console.log('EXAMPLE', start.toISOString())
    console.log('book.startDate', book.startDate)
    console.log('book.endDate', book.endDate)

    console.log("break 4 -----------------------------")

    await testBook.save();

    res.status(200);
    res.json(testBook)

})

///  done  // with error handling
router.delete('/:bookingId', async (req, res) => {

    const id = req.params.bookingId;
    console.log(id);

    const bookingTest = await Booking.findByPk(id);
    console.log(bookingTest);

    // if the booking isnt found
    if (!bookingTest) {
        res.status(404);
        res.json({ message: 'Booking couldn\'t be found' });
    }

    console.log('break 1 ---------------------------------------')

    const { userId, spotId } = bookingTest
    console.log('userId', userId)
    console.log('spotId', spotId)

    const { user } = req
    console.log('user.id', user.id)

    // if the user isn't the owner
    if (userId !== user.id) {
        res.status(403);
        res.json({
            message: 'Forbidden'
        })
    }

    console.log('break 2 ---------------------------------------')


    const start = bookingTest.startDate.getTime()
    console.log('start', start)
    // console.log('start', start)

    const end = bookingTest.endDate.getTime()
    console.log('end', end)

    const date = new Date().getTime();
    console.log('date', date)

    // if the current  time is lesser then the startDate and the current time is greater than the endDates
    if (end > date && start < date) {
        res.status(403);
        res.json({
            message: 'Bookings that have been started can\'t be deleted'
        })
    }

    console.log('break 3 ------------------------------------')

    await bookingTest.destroy();

    const bookingTest2 = await Booking.findByPk(id);
    console.log(bookingTest2);


    res.status(200);
    res.json({
        message: 'Successfully deleted'
    })
})


module.exports = router

// const id = req.params.bookingId;
// console.log(id);

// const bookingTest = await Booking.findByPk(id);
// console.log(bookingTest);

// // if the booking isnt found
// if (!bookingTest) {
//     res.status(404);
//     res.json('Booking couldn\'t be found');
// }

// console.log('break 1 ---------------------------------------')

// const { userId, spotId } = bookingTest
// console.log('userId', userId)
// console.log('spotId', spotId)

// const { user } = req
// console.log('user.id', user.id)

// // if the user isnt the owner
// if (userId !== user.id) {
//     res.status(403);
//     res.json({
//         message: 'Forbidden'
//     })
// }

// console.log('break 2 ---------------------------------------')

//     const {startDate} = bookingTest
//     console.log('startDate',startDate.toDateString())

//     const start  = new Date(startDate)
//     console.log(start)

//     const date = new Date()
//     console.log(date)

// if (start > date) {
//     res.status(403);
//     res.json({
//         message: 'Bookings that have been started can\'t be deleted'
//     })
// }
